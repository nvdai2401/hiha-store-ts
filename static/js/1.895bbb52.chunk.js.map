{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","modules/shop/state/shop.selectors.ts","hooks/state/shopState.ts","modules/shop/components/CollectionItem/CollectionItem.tsx","modules/shop/pages/CollectionPreview/components/CollectionList/CollectionList.tsx","modules/shop/pages/CollectionPreview/CollectionPreview.tsx","modules/shop/pages/CollectionPage/CollectionPage.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","selectShop","state","shop","selectShopCollections","createSelector","collections","selectCollectionsForPreview","map","selectCollectionsFetching","loading","useSelectCollection","collectionName","useSelector","selectCollections","CollectionItem","props","item","addItem","name","price","imageUrl","placeHolder","className","src","alt","onClick","classes","CollectionList","title","items","pathname","useLocation","useAddItemToCart","to","toLowerCase","toUpperCase","filter","index","id","CollectionPreview","fetchCollectionsStart","dispatch","useDispatch","useCallback","useFetchCollectionsStart","useEffect","otherCollectionsProps","toString","CollectionPage","useParams","collection","fetchCollectionStart","useFetchCollectionStart"],"mappings":"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","file":"static/js/1.895bbb52.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { createSelector } from 'reselect';\n\nconst selectShop = (state) => state.shop;\n\nexport const selectShopCollections = createSelector(\n  [selectShop],\n  (shop) => shop.collections,\n);\n\nexport const selectCollectionsForPreview = createSelector(\n  [selectShopCollections],\n  (collections) =>\n    collections ? Object.keys(collections).map((key) => collections[key]) : [],\n);\n\nexport const selectCollections = (collectionName: string) =>\n  createSelector([selectShopCollections], (collections) => {\n    return collections ? collections[collectionName] : null;\n  });\n\nexport const selectCollectionsFetching = createSelector(\n  [selectShop],\n  (shop) => shop.loading,\n);\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  fetchCollectionsStart,\n  fetchCollectionStart,\n} from 'modules/shop/state/shop.slice';\nimport {\n  selectCollectionsForPreview,\n  selectCollections,\n  selectCollectionsFetching,\n} from 'modules/shop/state/shop.selectors';\n\nexport function useFetchCollectionsStart() {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(fetchCollectionsStart()), [dispatch]);\n}\n\nexport function useFetchCollectionStart() {\n  const dispatch = useDispatch();\n  return useCallback(\n    (collectionName: string) => dispatch(fetchCollectionStart(collectionName)),\n    [dispatch],\n  );\n}\n\nexport function useSelectCollectionsForPreview() {\n  return useSelector(selectCollectionsForPreview);\n}\n\nexport function useSelectCollection(collectionName: string) {\n  return useSelector(selectCollections(collectionName));\n}\n\nexport function useSelectCollectionsFetching() {\n  return useSelector(selectCollectionsFetching);\n}\n","import React from 'react';\n\nimport { LazyImage, CustomButton as AddToCartButton } from 'components';\n\ninterface ICollection {\n  id?: number;\n  imageUrl: string;\n  name: string;\n  price: number;\n}\n\ntype Props = {\n  item: ICollection;\n  addItem: () => void;\n};\n\nconst CollectionItem: React.FC<Props> = (props: Props) => {\n  const { item, addItem } = props;\n  const { name, price, imageUrl } = item;\n  const placeHolder = `${imageUrl}?tr=bl-30,q-50`;\n\n  return (\n    <div className=\"c-collection-item\">\n      <LazyImage placeHolder={placeHolder} src={imageUrl} alt={name} />\n      <div className=\"c-collection-item__info m-b-6\">\n        <span className=\"c-collection-item__info__name\">{name}</span>\n        <span>{`$${price}`}</span>\n      </div>\n      <AddToCartButton onClick={addItem} classes=\"add-to-cart-button\">\n        Add to cart\n      </AddToCartButton>\n    </div>\n  );\n};\n\nexport default CollectionItem;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { IProduct } from 'common/definitions/product';\n\nimport { useAddItemToCart } from 'hooks/state/cartState';\n\nimport { CollectionItem } from 'modules/shop/components';\n\ntype Props = {\n  title: string;\n  items: IProduct[];\n};\n\nconst CollectionList: React.FC<Props> = (props: Props) => {\n  const { title, items } = props;\n  const { pathname } = useLocation();\n  const addItem = useAddItemToCart();\n\n  return (\n    <div className=\"c-collection-list\">\n      <Link\n        to={`${pathname}/${title.toLowerCase()}`}\n        className=\"c-collection-list__title bold m-b-18\"\n      >\n        {title.toUpperCase()}\n      </Link>\n      <div className=\"c-collection-list__products\">\n        {items\n          .filter((item, index) => index < 4)\n          .map((item) => (\n            <CollectionItem\n              key={item.id}\n              item={item}\n              addItem={() => addItem(item)}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CollectionList;\n","import React, { useEffect } from 'react';\n\nimport {\n  useFetchCollectionsStart,\n  useSelectCollectionsForPreview,\n  useSelectCollectionsFetching,\n} from 'hooks/state/shopState';\n\nimport { Spinner } from 'components';\nimport { CollectionList } from './components';\n\nconst CollectionPreview: React.FC = () => {\n  const collections = useSelectCollectionsForPreview();\n  const loading = useSelectCollectionsFetching();\n  const fetchCollectionsStart = useFetchCollectionsStart();\n\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]);\n\n  if (loading) return <Spinner classes=\"m-t-210\" />;\n\n  return (\n    <div className=\"c-collection-preview\">\n      {collections.map(({ id, ...otherCollectionsProps }) => (\n        <CollectionList key={id.toString()} {...otherCollectionsProps} />\n      ))}\n    </div>\n  );\n}\n\nexport default CollectionPreview;\n","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  useSelectCollection,\n  useFetchCollectionStart,\n} from 'hooks/state/shopState';\nimport { useAddItemToCart } from 'hooks/state/cartState';\n\nimport { Spinner } from 'components';\nimport { CollectionItem } from 'modules/shop/components';\n\ntype ParamsTypes = {\n  collectionName: string;\n};\n\nconst CollectionPage: React.FC = () => {\n  const { collectionName } = useParams<ParamsTypes>();\n  const collection = useSelectCollection(collectionName);\n  const addItem = useAddItemToCart();\n  const fetchCollectionStart = useFetchCollectionStart();\n\n  useEffect(() => {\n    if (!collection) {\n      fetchCollectionStart(collectionName);\n    }\n  }, [collection, collectionName, fetchCollectionStart]);\n\n  if (!collection) return <Spinner classes=\"m-t-210\" />;\n\n  return (\n    <div className=\"c-collection-page\">\n      <h1 className=\"c-collection-page__title\">{collection.title}</h1>\n      <div className=\"c-collection-page__items\">\n        {collection.items.map((item) => (\n          <CollectionItem\n            key={item.id}\n            item={item}\n            addItem={() => addItem(item)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CollectionPage;\n"],"sourceRoot":""}